name: Terraform CD Workflow

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Which environment to deploy to?'
        required: false

jobs:
  deploy:
    environment:
      name: ${{ github.ref_name == 'main' && 'prod' || github.ref_name == 'dev' && 'dev' || 'preview' }}
    runs-on: ubuntu-latest
    outputs:
      last_version: ${{ steps.get-version.outputs.last_version }}
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Print environment
        run: echo "Deploying to ${{ github.ref_name }} branch with environment ${{ github.ref_name == 'main' && 'prod' || github.ref_name == 'dev' && 'dev' || 'preview' }}"


      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Download artifact
        uses: dawidd6/action-download-artifact@v11
        with:
          github_token: ${{secrets.MY_PAT_SECRET}}
          workflow: ci.yaml
          # name: terraform-artifact.zip

      - uses: actions/checkout@v4

      - name: Get latest tag
        id: get-version
        run: |
          git fetch --tags
          last_version=$(git tag --sort=version:refname | grep -v '^v' | tail -n 1)
          echo "last_version=$last_version" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: ${{ github.repository }}
          version: 'tags/${{ steps.get-version.outputs.last_version }}'
          file: terraform-artifact.zip
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract zipped artifact
        run: |
          sudo apt install -y unzip
          unzip terraform-artifact.zip -d terraform-artifact

      - uses: hashicorp/setup-terraform@v3
        
      - run: |
          BRANCH_NAME="${{ github.ref_name }}"
          if [[ "$BRANCH_NAME" == "main" ]]; then
            WORKSPACE="prod"
          elif [[ "$BRANCH_NAME" == "dev" ]]; then
            WORKSPACE="dev"
          else
            WORKSPACE="default"
          fi

          echo "Selected Terraform workspace: $WORKSPACE"

          if terraform workspace list | grep -qw "$WORKSPACE"; then
            terraform workspace select "$WORKSPACE"
          else
            terraform workspace new "$WORKSPACE"
          fi
      

          terraform init
          terraform plan
          terraform apply -auto-approve